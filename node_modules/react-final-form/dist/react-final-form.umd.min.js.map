{"version":3,"file":"react-final-form.umd.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../src/renderComponent.js","../src/flattenSubscription.js","../src/useForm.js","../src/useField.js","../src/getValue.js","../src/isReactNative.js","../src/context.js","../src/useWhenValueChanges.js","../src/shallowEqual.js","../src/isSyntheticEvent.js","../src/useFormState.js","../src/ReactFinalForm.js","../src/Field.js","../src/useConstant.js","../src/FormSpy.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// @flow\nimport * as React from 'react'\nimport type { RenderableProps } from './types'\n\n// shared logic between components that use either render prop,\n// children render function, or component prop\nexport default function renderComponent<T>(\n  props: RenderableProps<T> & T,\n  name: string\n): React.Node {\n  const { render, children, component, ...rest } = props\n  if (component) {\n    return React.createElement(component, { ...rest, children, render })\n  }\n  if (render) {\n    return render(children === undefined ? rest : { ...rest, children }) // inject children back in\n  }\n  if (typeof children !== 'function') {\n    // istanbul ignore next\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        `Warning: Must specify either a render prop, a render function as children, or a component prop to ${name}`\n      )\n    }\n    return null // warning will alert developer to their mistake\n  }\n  return children(rest)\n}\n","// @flow\ntype Subscription = { [string]: boolean }\nexport default function flattenSubscription(\n  subscription: Subscription = {}\n): string[] {\n  return Object.keys(subscription).filter(key => subscription[key] === true)\n}\n","// @flow\nimport * as React from 'react'\nimport type { FormApi } from 'final-form'\nimport ReactFinalFormContext from './context'\n\nconst useForm = (componentName?: string): FormApi => {\n  const form: ?FormApi = React.useContext(ReactFinalFormContext)\n  if (!form) {\n    throw new Error(\n      `Warning: ${componentName ||\n        'useForm'} must be used inside of a <Form> component`\n    )\n  }\n  return form\n}\n\nexport default useForm\n","// @flow\nimport * as React from 'react'\nimport { fieldSubscriptionItems } from 'final-form'\nimport flattenSubscription from './flattenSubscription'\nimport type { FieldSubscription, FieldState, FormApi } from 'final-form'\nimport type { UseFieldConfig, FieldInputProps, FieldRenderProps } from './types'\nimport isReactNative from './isReactNative'\nimport getValue from './getValue'\nimport useForm from './useForm'\n\nconst all: FieldSubscription = fieldSubscriptionItems.reduce((result, key) => {\n  result[key] = true\n  return result\n}, {})\n\nconst defaultFormat = (value: ?any, name: string) =>\n  value === undefined ? '' : value\nconst defaultParse = (value: ?any, name: string) =>\n  value === '' ? undefined : value\n\nconst useField = (\n  name: string,\n  {\n    allowNull,\n    component,\n    defaultValue,\n    format = defaultFormat,\n    formatOnBlur,\n    initialValue,\n    isEqual,\n    multiple,\n    parse = defaultParse,\n    subscription,\n    type,\n    validate,\n    validateFields,\n    value: _value\n  }: UseFieldConfig = {}\n): FieldRenderProps => {\n  const form: FormApi = useForm('useField')\n\n  // keep ref to most recent copy of validate function\n  const validateRef = React.useRef(validate)\n  React.useEffect(() => {\n    validateRef.current = validate\n  })\n\n  const register = (callback: FieldState => void) =>\n    form.registerField(name, callback, subscription || all, {\n      defaultValue,\n      getValidator: () => validateRef.current,\n      initialValue,\n      isEqual,\n      validateFields\n    })\n\n  const firstRender = React.useRef(true)\n\n  // synchronously register and unregister to query field state for our subscription on first render\n  const [state, setState] = React.useState<FieldState>(\n    (): FieldState => {\n      let initialState: FieldState = {}\n      register(state => {\n        initialState = state\n      })()\n      return initialState\n    }\n  )\n\n  const flattenedSubscription = flattenSubscription(subscription || all)\n  // useDependenciesDebugger({\n  //   name,\n  //   defaultValue,\n  //   validate,\n  //   initialValue,\n  //   isEqual,\n  //   validateFields,\n  //   form\n  // })\n  React.useEffect(\n    () =>\n      register(state => {\n        if (firstRender.current) {\n          firstRender.current = false\n        } else {\n          setState(state)\n        }\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      name,\n      defaultValue,\n      // If we want to allow inline fat-arrow field-level validation functions, we\n      // cannot reregister field every time validate function !==.\n      // validate,\n      initialValue,\n      isEqual,\n      validateFields,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...flattenedSubscription\n    ]\n  )\n\n  const handlers = {\n    onBlur: React.useCallback(\n      (event: ?SyntheticFocusEvent<*>) => {\n        // this is to appease the Flow gods\n        // istanbul ignore next\n        if (state) {\n          state.blur()\n          if (format && formatOnBlur) {\n            state.change(format(state.value, state.name))\n          }\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [state.name, state.value, format, formatOnBlur]\n    ),\n    onChange: React.useCallback(\n      (event: SyntheticInputEvent<*> | any) => {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production' && event && event.target) {\n          const targetType = event.target.type\n          const unknown =\n            ~['checkbox', 'radio', 'select-multiple'].indexOf(targetType) &&\n            !type\n\n          const value: any =\n            targetType === 'select-multiple' ? state.value : _value\n\n          if (unknown) {\n            console.error(\n              `Warning: You must pass \\`type=\"${\n                targetType === 'select-multiple' ? 'select' : targetType\n              }\"\\` prop to your Field(${name}) component.\\n` +\n                `Without it we don't know how to unpack your \\`value\\` prop - ${\n                  Array.isArray(value) ? `[${value}]` : `\"${value}\"`\n                }.`\n            )\n          }\n        }\n\n        const value: any =\n          event && event.target\n            ? getValue(event, state.value, _value, isReactNative)\n            : event\n        state.change(parse ? parse(value, name) : value)\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [_value, name, parse, state.value, type]\n    ),\n    onFocus: React.useCallback((event: ?SyntheticFocusEvent<*>) => {\n      state.focus()\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n  }\n\n  let { blur, change, focus, value, name: ignoreName, ...otherState } = state\n  const meta = {\n    // this is to appease the Flow gods\n    active: otherState.active,\n    data: otherState.data,\n    dirty: otherState.dirty,\n    dirtySinceLastSubmit: otherState.dirtySinceLastSubmit,\n    error: otherState.error,\n    initial: otherState.initial,\n    invalid: otherState.invalid,\n    modified: otherState.modified,\n    pristine: otherState.pristine,\n    submitError: otherState.submitError,\n    submitFailed: otherState.submitFailed,\n    submitSucceeded: otherState.submitSucceeded,\n    submitting: otherState.submitting,\n    touched: otherState.touched,\n    valid: otherState.valid,\n    visited: otherState.visited\n  }\n  if (formatOnBlur) {\n    value = defaultFormat(value, name)\n  } else if (format) {\n    value = format(value, name)\n  }\n  if (value === null && !allowNull) {\n    value = ''\n  }\n  const input: FieldInputProps = { name, value, ...handlers }\n  if (type === 'checkbox') {\n    input.type = type // make sure it gets passed along to input\n    if (_value === undefined) {\n      input.checked = !!value\n    } else {\n      input.checked = !!(Array.isArray(value) && ~value.indexOf(_value))\n      input.value = _value\n    }\n  } else if (type === 'radio') {\n    input.type = type // make sure it gets passed along to input\n    input.checked = value === _value\n    input.value = _value\n  } else if (component === 'select' && multiple) {\n    input.value = input.value || []\n    input.multiple = true\n  }\n\n  const renderProps: FieldRenderProps = { input, meta } // assign to force Flow check\n  return renderProps\n}\n\nexport default useField\n","// @flow\nconst getSelectedValues = options => {\n  const result = []\n  if (options) {\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index]\n      if (option.selected) {\n        result.push(option.value)\n      }\n    }\n  }\n  return result\n}\n\nconst getValue = (\n  event: SyntheticInputEvent<*>,\n  currentValue: any,\n  valueProp: any,\n  isReactNative: boolean\n) => {\n  if (\n    !isReactNative &&\n    event.nativeEvent &&\n    (event.nativeEvent: Object).text !== undefined\n  ) {\n    return (event.nativeEvent: Object).text\n  }\n  if (isReactNative && event.nativeEvent) {\n    return (event.nativeEvent: any).text\n  }\n  const detypedEvent: any = event\n  const { target: { type, value, checked } } = detypedEvent\n  switch (type) {\n    case 'checkbox':\n      if (valueProp !== undefined) {\n        // we are maintaining an array, not just a boolean\n        if (checked) {\n          // add value to current array value\n          return Array.isArray(currentValue)\n            ? currentValue.concat(valueProp)\n            : [valueProp]\n        } else {\n          // remove value from current array value\n          if (!Array.isArray(currentValue)) {\n            return currentValue\n          }\n          const index = currentValue.indexOf(valueProp)\n          if (index < 0) {\n            return currentValue\n          } else {\n            return currentValue\n              .slice(0, index)\n              .concat(currentValue.slice(index + 1))\n          }\n        }\n      } else {\n        // it's just a boolean\n        return !!checked\n      }\n    case 'select-multiple':\n      return getSelectedValues((event.target: any).options)\n    default:\n      return value\n  }\n}\n\nexport default getValue\n","// @flow\nconst isReactNative =\n  typeof window !== 'undefined' &&\n  window.navigator &&\n  window.navigator.product &&\n  window.navigator.product === 'ReactNative'\n\nexport default isReactNative\n","// @flow\nimport * as React from 'react'\nimport type { FormApi } from 'final-form'\n\nexport default React.createContext<?FormApi>()\n","// @flow\nimport React from 'react'\n\nexport default function useWhenValueChanges(\n  value: any,\n  callback: () => void,\n  isEqual: (any, any) => boolean = (a, b) => a === b\n) {\n  const previous = React.useRef(value)\n  React.useEffect(() => {\n    if (!isEqual(value, previous.current)) {\n      callback()\n      previous.current = value\n    }\n  })\n}\n","// @flow\nconst shallowEqual = (a: any, b: any): boolean => {\n  if (a === b) {\n    return true\n  }\n  if (typeof a !== 'object' || !a || typeof b !== 'object' || !b) {\n    return false\n  }\n  var keysA = Object.keys(a)\n  var keysB = Object.keys(b)\n  if (keysA.length !== keysB.length) {\n    return false\n  }\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b)\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx]\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default shallowEqual\n","// @flow\nconst isSyntheticEvent = (candidate: any): boolean =>\n  !!(candidate && typeof candidate.stopPropagation === 'function')\n\nexport default isSyntheticEvent\n","// @flow\nimport * as React from 'react'\nimport flattenSubscription from './flattenSubscription'\nimport type { UseFormStateParams } from './types'\nimport type { FormState, FormApi } from 'final-form'\nimport { all } from './ReactFinalForm'\nimport useForm from './useForm'\n\nconst useFormState = ({\n  onChange,\n  subscription\n}: UseFormStateParams = {}): FormState => {\n  const form: FormApi = useForm('useFormState')\n  const firstRender = React.useRef(true)\n\n  // synchronously register and unregister to query field state for our subscription on first render\n  const [state, setState] = React.useState<FormState>(\n    (): FormState => {\n      let initialState: FormState = {}\n      form.subscribe(state => {\n        initialState = state\n      }, subscription || all)()\n      if (onChange) {\n        onChange(initialState)\n      }\n      return initialState\n    }\n  )\n\n  const flattenedSubscription = flattenSubscription(subscription || all)\n  React.useEffect(\n    () =>\n      form.subscribe(newState => {\n        if (firstRender.current) {\n          firstRender.current = false\n        } else {\n          setState(newState)\n          if (onChange) {\n            onChange(newState)\n          }\n        }\n      }, subscription || all),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    flattenedSubscription\n  )\n  return state\n}\n\nexport default useFormState\n","// @flow\nimport * as React from 'react'\nimport {\n  createForm,\n  formSubscriptionItems,\n  version as ffVersion\n} from 'final-form'\nimport type {\n  FormApi,\n  Config,\n  FormSubscription,\n  FormState,\n  Unsubscribe\n} from 'final-form'\nimport type { FormProps as Props } from './types'\nimport renderComponent from './renderComponent'\nimport useWhenValueChanges from './useWhenValueChanges'\nimport useConstant from './useConstant'\nimport shallowEqual from './shallowEqual'\nimport isSyntheticEvent from './isSyntheticEvent'\nimport type { FormRenderProps } from './types.js.flow'\nimport flattenSubscription from './flattenSubscription'\nimport ReactFinalFormContext from './context'\n\nexport const version = '4.1.0'\n\nconst versions = {\n  'final-form': ffVersion,\n  'react-final-form': version\n}\n\nexport const all: FormSubscription = formSubscriptionItems.reduce(\n  (result, key) => {\n    result[key] = true\n    return result\n  },\n  {}\n)\n\nconst ReactFinalForm = ({\n  debug,\n  decorators,\n  destroyOnUnregister,\n  initialValues,\n  initialValuesEqual,\n  keepDirtyOnReinitialize,\n  mutators,\n  onSubmit,\n  subscription,\n  validate,\n  validateOnBlur,\n  ...rest\n}: Props) => {\n  const config: Config = {\n    debug,\n    destroyOnUnregister,\n    initialValues,\n    keepDirtyOnReinitialize,\n    mutators,\n    onSubmit,\n    validate,\n    validateOnBlur\n  }\n\n  const form: FormApi = useConstant(() => {\n    const f = createForm(config)\n    f.pauseValidation()\n    return f\n  })\n\n  // synchronously register and unregister to query form state for our subscription on first render\n  const [state, setState] = React.useState<FormState>(\n    (): FormState => {\n      let initialState: FormState = {}\n      form.subscribe(state => {\n        initialState = state\n      }, subscription || all)()\n      return initialState\n    }\n  )\n\n  const flattenedSubscription = flattenSubscription(subscription || all)\n  React.useEffect(() => {\n    // We have rendered, so all fields are no registered, so we can unpause validation\n    form.isValidationPaused() && form.resumeValidation()\n    const unsubscriptions: Unsubscribe[] = [\n      form.subscribe(s => {\n        if (!shallowEqual(s, state)) {\n          setState(s)\n        }\n      }, subscription || all),\n      ...(decorators\n        ? decorators.map(decorator =>\n            // this noop ternary is to appease the flow gods\n            // istanbul ignore next\n            decorator(form)\n          )\n        : [])\n    ]\n\n    return () => {\n      unsubscriptions.forEach(unsubscribe => unsubscribe())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [decorators, ...flattenedSubscription])\n\n  // warn about decorator changes\n  // istanbul ignore next\n  if (process.env.NODE_ENV !== 'production') {\n    // You're never supposed to use hooks inside a conditional, but in this\n    // case we can be certain that you're not going to be changing your\n    // NODE_ENV between renders, so this is safe.\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useWhenValueChanges(\n      decorators,\n      () => {\n        console.error(\n          'Warning: Form decorators should not change from one render to the next as new values will be ignored'\n        )\n      },\n      shallowEqual\n    )\n  }\n\n  // allow updatable config\n  useWhenValueChanges(debug, () => {\n    form.setConfig('debug', debug)\n  })\n  useWhenValueChanges(destroyOnUnregister, () => {\n    form.setConfig('destroyOnUnregister', destroyOnUnregister)\n  })\n  useWhenValueChanges(\n    initialValues,\n    () => {\n      form.setConfig('initialValues', initialValues)\n    },\n    initialValuesEqual || shallowEqual\n  )\n  useWhenValueChanges(keepDirtyOnReinitialize, () => {\n    form.setConfig('keepDirtyOnReinitialize', keepDirtyOnReinitialize)\n  })\n  useWhenValueChanges(mutators, () => {\n    form.setConfig('mutators', mutators)\n  })\n  useWhenValueChanges(onSubmit, () => {\n    form.setConfig('onSubmit', onSubmit)\n  })\n  useWhenValueChanges(validate, () => {\n    form.setConfig('validate', validate)\n  })\n  useWhenValueChanges(validateOnBlur, () => {\n    form.setConfig('validateOnBlur', validateOnBlur)\n  })\n\n  const handleSubmit = (event: ?SyntheticEvent<HTMLFormElement>) => {\n    if (event) {\n      // sometimes not true, e.g. React Native\n      if (typeof event.preventDefault === 'function') {\n        event.preventDefault()\n      }\n      if (typeof event.stopPropagation === 'function') {\n        // prevent any outer forms from receiving the event too\n        event.stopPropagation()\n      }\n    }\n    return form.submit()\n  }\n\n  const renderProps: FormRenderProps = {\n    // assign to force Flow check\n    ...state,\n    form: {\n      ...form,\n      reset: eventOrValues => {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          form.reset()\n        } else {\n          form.reset(eventOrValues)\n        }\n      }\n    },\n    handleSubmit\n  }\n  return React.createElement(\n    ReactFinalFormContext.Provider,\n    { value: form },\n    renderComponent(\n      {\n        ...rest,\n        ...renderProps,\n        __versions: versions\n      },\n      'ReactFinalForm'\n    )\n  )\n}\n\nexport default ReactFinalForm\n","// @flow\nimport * as React from 'react'\nimport type { FieldProps as Props, FieldRenderProps } from './types'\nimport renderComponent from './renderComponent'\nimport useField from './useField'\n\nconst Field = ({\n  allowNull,\n  children,\n  component,\n  defaultValue,\n  format,\n  formatOnBlur,\n  initialValue,\n  isEqual,\n  multiple,\n  name,\n  parse,\n  subscription,\n  type,\n  validate,\n  validateFields,\n  value,\n  ...rest\n}: Props) => {\n  const field: FieldRenderProps = useField(name, {\n    allowNull,\n    children,\n    component,\n    defaultValue,\n    format,\n    formatOnBlur,\n    initialValue,\n    isEqual,\n    multiple,\n    parse,\n    subscription,\n    type,\n    validate,\n    validateFields,\n    value\n  })\n\n  if (typeof children === 'function') {\n    return (children: Function)({ ...field, ...rest })\n  }\n\n  if (typeof component === 'string') {\n    // ignore meta, combine input with any other props\n    return React.createElement(component, { ...field.input, children, ...rest })\n  }\n  return renderComponent(\n    { ...field, children, component, ...rest },\n    `Field(${name})`\n  )\n}\n\nexport default Field\n","// @flow\nimport React from 'react'\n\n/**\n * A simple hook to create a constant value that lives for\n * the lifetime of the component.\n *\n * Plagiarized from https://github.com/Andarist/use-constant\n *\n * Do NOT reuse this code unless you know what you're doing.\n * Use Andarist's hook; it's more fault tolerant to things like\n * falsy values.\n *\n * @param {Function} init - A function to generate the value\n */\nexport default function useConstant<T>(init: () => T): T {\n  const ref = React.useRef<?T>()\n  if (!ref.current) {\n    ref.current = init()\n  }\n  return ref.current\n}\n","// @flow\nimport * as React from 'react'\nimport renderComponent from './renderComponent'\nimport type { FormSpyPropsWithForm as Props, FormSpyRenderProps } from './types'\nimport type { FormApi } from 'final-form'\nimport isSyntheticEvent from './isSyntheticEvent'\nimport useFormState from './useFormState'\nimport ReactFinalFormContext from './context'\n\nconst FormSpy = ({ onChange, subscription, ...rest }: Props) => {\n  const reactFinalForm: ?FormApi = React.useContext(ReactFinalFormContext)\n  if (!reactFinalForm) {\n    throw new Error(\n      'Warning: FormSpy must be used inside of a ReactFinalForm component'\n    )\n  }\n  const state = useFormState({ onChange, subscription })\n  if (onChange) {\n    return null\n  }\n\n  const renderProps: FormSpyRenderProps = {\n    form: {\n      ...reactFinalForm,\n      reset: eventOrValues => {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          reactFinalForm.reset()\n        } else {\n          reactFinalForm.reset(eventOrValues)\n        }\n      }\n    }\n  }\n  return renderComponent(\n    {\n      ...rest,\n      ...state,\n      ...renderProps\n    },\n    'FormSpy'\n  )\n}\n\nexport default FormSpy\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","renderComponent","props","name","render","children","component","rest","React","undefined","flattenSubscription","subscription","filter","useForm","componentName","form","ReactFinalFormContext","Error","defaultFormat","value","defaultParse","useField","allowNull","defaultValue","format","formatOnBlur","initialValue","isEqual","multiple","parse","type","validate","validateFields","_value","validateRef","register","callback","registerField","all","getValidator","current","firstRender","initialState","state","setState","flattenedSubscription","handlers","onBlur","event","blur","change","onChange","currentValue","valueProp","isReactNative","nativeEvent","text","checked","Array","isArray","concat","index","slice","options","result","option","selected","push","getSelectedValues","getValue","onFocus","focus","otherState","meta","active","data","dirty","dirtySinceLastSubmit","error","initial","invalid","modified","pristine","submitError","submitFailed","submitSucceeded","submitting","touched","valid","visited","input","window","navigator","product","fieldSubscriptionItems","reduce","useWhenValueChanges","a","b","previous","useRef","useEffect","shallowEqual","keysA","keysB","bHasOwnProperty","bind","idx","isSyntheticEvent","candidate","stopPropagation","useFormState","subscribe","newState","version","versions","ffVersion","formSubscriptionItems","field","debug","decorators","destroyOnUnregister","initialValues","initialValuesEqual","keepDirtyOnReinitialize","mutators","onSubmit","validateOnBlur","config","init","ref","useConstant","f","createForm","pauseValidation","isValidationPaused","resumeValidation","unsubscriptions","s","map","decorator","forEach","unsubscribe","setConfig","renderProps","reset","eventOrValues","handleSubmit","preventDefault","submit","Provider","__versions","reactFinalForm"],"mappings":"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"}