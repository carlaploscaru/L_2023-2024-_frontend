{"ast":null,"code":"import { redirect } from \"react-router-dom\";\nexport const getTokenDuration = () => {\n  const storedExpirationDate = localStorage.getItem(\"expiration\");\n  const expirationDate = new Date(storedExpirationDate);\n  const now = new Date();\n  const duration = expirationDate.getTime() - now.getTime();\n  return duration;\n};\nexport const getAuthToken = () => {\n  const token = localStorage.getItem(\"token\");\n  const tokenDuration = getTokenDuration();\n  if (!token) {\n    return null;\n  }\n  if (tokenDuration < 0) {\n    return \"EXPIRED\";\n  }\n  return token;\n};\nexport const tokenLoader = () => {\n  return {\n    token: getAuthToken()\n  };\n};\nconst resetPassword = async (req, res) => {\n  const {\n    email\n  } = req.body;\n  const resetToken = generateResetToken();\n\n  // Store the reset token and its expiration date in your database (e.g., MongoDB)\n  // Update the user's record with the reset token and its expiration date\n\n  // Send an email to the user with a link containing the reset token\n  sendResetEmail(email, resetToken);\n  res.status(200).json({\n    message: \"Password reset initiated. Check your email.\"\n  });\n};\nmodule.exports = {\n  resetPassword\n};","map":{"version":3,"names":["redirect","getTokenDuration","storedExpirationDate","localStorage","getItem","expirationDate","Date","now","duration","getTime","getAuthToken","token","tokenDuration","tokenLoader","resetPassword","req","res","email","body","resetToken","generateResetToken","sendResetEmail","status","json","message","module","exports"],"sources":["D:/proiecte/frontend/src/utils/auth.js"],"sourcesContent":["import { redirect } from \"react-router-dom\";\r\n\r\n\r\nexport const getTokenDuration = () => {\r\n    const storedExpirationDate = localStorage.getItem(\"expiration\");\r\n    const expirationDate = new Date(storedExpirationDate);\r\n    const now = new Date();\r\n    const duration = expirationDate.getTime() - now.getTime();\r\n  \r\n    return duration;\r\n};\r\n  \r\n\r\nexport const getAuthToken = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const tokenDuration = getTokenDuration();    \r\n  \r\n    if (!token) {\r\n      return null; \r\n    }\r\n\r\n    if (tokenDuration < 0) {\r\n        return \"EXPIRED\";\r\n      }\r\n    \r\n    return token;\r\n  };\r\n\r\n  export const tokenLoader = () => {\r\n\r\n    return {\r\n      token: getAuthToken(),\r\n    };\r\n  };\r\n\r\n\r\n\r\n  const resetPassword = async (req, res) => {\r\n    const { email } = req.body; \r\n    const resetToken = generateResetToken();\r\n  \r\n    // Store the reset token and its expiration date in your database (e.g., MongoDB)\r\n    // Update the user's record with the reset token and its expiration date\r\n  \r\n    // Send an email to the user with a link containing the reset token\r\n    sendResetEmail(email, resetToken);\r\n  \r\n    res.status(200).json({ message: \"Password reset initiated. Check your email.\" });\r\n  };\r\n  \r\n  module.exports = { resetPassword };"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAG3C,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAClC,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC/D,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACJ,oBAAoB,CAAC;EACrD,MAAMK,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;EACtB,MAAME,QAAQ,GAAGH,cAAc,CAACI,OAAO,CAAC,CAAC,GAAGF,GAAG,CAACE,OAAO,CAAC,CAAC;EAEzD,OAAOD,QAAQ;AACnB,CAAC;AAGD,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAM;EAC9B,MAAMC,KAAK,GAAGR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMQ,aAAa,GAAGX,gBAAgB,CAAC,CAAC;EAExC,IAAI,CAACU,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,IAAIC,aAAa,GAAG,CAAC,EAAE;IACnB,OAAO,SAAS;EAClB;EAEF,OAAOD,KAAK;AACd,CAAC;AAED,OAAO,MAAME,WAAW,GAAGA,CAAA,KAAM;EAE/B,OAAO;IACLF,KAAK,EAAED,YAAY,CAAC;EACtB,CAAC;AACH,CAAC;AAID,MAAMI,aAAa,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC;EAAM,CAAC,GAAGF,GAAG,CAACG,IAAI;EAC1B,MAAMC,UAAU,GAAGC,kBAAkB,CAAC,CAAC;;EAEvC;EACA;;EAEA;EACAC,cAAc,CAACJ,KAAK,EAAEE,UAAU,CAAC;EAEjCH,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IAAEC,OAAO,EAAE;EAA8C,CAAC,CAAC;AAClF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EAAEZ;AAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}