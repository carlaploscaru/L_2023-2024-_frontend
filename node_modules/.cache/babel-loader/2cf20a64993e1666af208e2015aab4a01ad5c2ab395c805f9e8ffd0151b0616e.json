{"ast":null,"code":"var _jsxFileName = \"D:\\\\proiecte\\\\frontend\\\\src\\\\pages\\\\RecoverPassword.js\";\nimport RecoverPasswordForm from \"../components/RecoverPasswordForm\";\nimport { json, redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecoverPasswordPage = () => {\n  return /*#__PURE__*/_jsxDEV(RecoverPasswordForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n};\n_c = RecoverPasswordPage;\nexport const action = async ({\n  request\n}) => {\n  const data = await request.formData();\n  const confirmPassword = {\n    resetToken: data.get(\"confirmResetToken\"),\n    password: data.get(\"newPassword\"),\n    repeatPassword: data.get(\"repeatPassword\")\n  };\n  const response = await fetch(\"http://localhost:8000/new-password\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(confirmPassword)\n  });\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Could not reset password.\"\n    }, {\n      status: 500\n    });\n  }\n  const resData = await response.json();\n  return redirect(\"/login\");\n};\nexport default RecoverPasswordPage;\nconst handleSubmit = async e => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  try {\n    const response = await fetch(\"http://localhost:8000/new-password\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        resetToken: formData.get(\"resetToken\"),\n        newPassword: formData.get(\"newPassword\")\n      })\n    });\n    if (response.ok) {\n      // Password reset successful; you can redirect the user to the login page\n    } else {\n      // Handle the error case (e.g., invalid token or expired token)\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"RecoverPasswordPage\");","map":{"version":3,"names":["RecoverPasswordForm","json","redirect","jsxDEV","_jsxDEV","RecoverPasswordPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","data","formData","confirmPassword","resetToken","get","password","repeatPassword","response","fetch","method","headers","body","JSON","stringify","status","ok","message","resData","handleSubmit","e","preventDefault","FormData","target","newPassword","error","console","$RefreshReg$"],"sources":["D:/proiecte/frontend/src/pages/RecoverPassword.js"],"sourcesContent":["import RecoverPasswordForm from \"../components/RecoverPasswordForm\"\r\nimport { json, redirect } from \"react-router-dom\";\r\n\r\nconst RecoverPasswordPage = () => {\r\n    return <RecoverPasswordForm />\r\n\r\n}\r\n\r\nexport const action = async ({ request }) => {\r\n    const data = await request.formData();\r\n    const confirmPassword = {\r\n        resetToken: data.get(\"confirmResetToken\"),\r\n        password: data.get(\"newPassword\"),\r\n        repeatPassword: data.get(\"repeatPassword\")\r\n    };\r\n  \r\n    const response = await fetch(\r\n      \"http://localhost:8000/new-password\",\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(confirmPassword),\r\n      }\r\n    );\r\n  \r\n    if (response.status === 422 || response.status === 401) {\r\n      return response;\r\n    }\r\n  \r\n    if (!response.ok) {\r\n      throw json({ message: \"Could not reset password.\" }, { status: 500 });\r\n    }\r\n  \r\n    const resData = await response.json();\r\n    \r\n    return redirect(\"/login\");\r\n  };\r\n  \r\n\r\nexport default RecoverPasswordPage;\r\n\r\n\r\n\r\n\r\n\r\nconst handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.target);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/new-password\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          resetToken: formData.get(\"resetToken\"),\r\n          newPassword: formData.get(\"newPassword\"),\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Password reset successful; you can redirect the user to the login page\r\n      } else {\r\n        // Handle the error case (e.g., invalid token or expired token)\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };"],"mappings":";AAAA,OAAOA,mBAAmB,MAAM,mCAAmC;AACnE,SAASC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAC9B,oBAAOD,OAAA,CAACJ,mBAAmB;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAElC,CAAC;AAAAC,EAAA,GAHKL,mBAAmB;AAKzB,OAAO,MAAMM,MAAM,GAAG,MAAAA,CAAO;EAAEC;AAAQ,CAAC,KAAK;EACzC,MAAMC,IAAI,GAAG,MAAMD,OAAO,CAACE,QAAQ,CAAC,CAAC;EACrC,MAAMC,eAAe,GAAG;IACpBC,UAAU,EAAEH,IAAI,CAACI,GAAG,CAAC,mBAAmB,CAAC;IACzCC,QAAQ,EAAEL,IAAI,CAACI,GAAG,CAAC,aAAa,CAAC;IACjCE,cAAc,EAAEN,IAAI,CAACI,GAAG,CAAC,gBAAgB;EAC7C,CAAC;EAED,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oCAAoC,EACpC;IACEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,eAAe;EACtC,CACF,CAAC;EAED,IAAIK,QAAQ,CAACO,MAAM,KAAK,GAAG,IAAIP,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;IACtD,OAAOP,QAAQ;EACjB;EAEA,IAAI,CAACA,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAM3B,IAAI,CAAC;MAAE4B,OAAO,EAAE;IAA4B,CAAC,EAAE;MAAEF,MAAM,EAAE;IAAI,CAAC,CAAC;EACvE;EAEA,MAAMG,OAAO,GAAG,MAAMV,QAAQ,CAACnB,IAAI,CAAC,CAAC;EAErC,OAAOC,QAAQ,CAAC,QAAQ,CAAC;AAC3B,CAAC;AAGH,eAAeG,mBAAmB;AAMlC,MAAM0B,YAAY,GAAG,MAAOC,CAAC,IAAK;EAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB,MAAMnB,QAAQ,GAAG,IAAIoB,QAAQ,CAACF,CAAC,CAACG,MAAM,CAAC;EAEvC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBV,UAAU,EAAEF,QAAQ,CAACG,GAAG,CAAC,YAAY,CAAC;QACtCmB,WAAW,EAAEtB,QAAQ,CAACG,GAAG,CAAC,aAAa;MACzC,CAAC;IACH,CAAC,CAAC;IAEF,IAAIG,QAAQ,CAACQ,EAAE,EAAE;MACf;IAAA,CACD,MAAM;MACL;IAAA;EAEJ,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAChC;AACF,CAAC;AAAC,IAAA3B,EAAA;AAAA6B,YAAA,CAAA7B,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}